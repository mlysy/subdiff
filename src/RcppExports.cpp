// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// log1pexp_wrapper
NumericVector log1pexp_wrapper(NumericVector x);
RcppExport SEXP subdiff_log1pexp_wrapper(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log1pexp_wrapper(x));
    return rcpp_result_gen;
END_RCPP
}
// ma1Resid
NumericMatrix ma1Resid(NumericMatrix Xt, double rho);
RcppExport SEXP subdiff_ma1Resid(SEXP XtSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(ma1Resid(Xt, rho));
    return rcpp_result_gen;
END_RCPP
}
// ma2Resid
NumericMatrix ma2Resid(NumericMatrix Xt, double rho1, double rho2);
RcppExport SEXP subdiff_ma2Resid(SEXP XtSEXP, SEXP rho1SEXP, SEXP rho2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< double >::type rho2(rho2SEXP);
    rcpp_result_gen = Rcpp::wrap(ma2Resid(Xt, rho1, rho2));
    return rcpp_result_gen;
END_RCPP
}
// ma3Resid
NumericMatrix ma3Resid(NumericMatrix Xt, double rho1, double rho2, double rho3);
RcppExport SEXP subdiff_ma3Resid(SEXP XtSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP rho3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xt(XtSEXP);
    Rcpp::traits::input_parameter< double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< double >::type rho3(rho3SEXP);
    rcpp_result_gen = Rcpp::wrap(ma3Resid(Xt, rho1, rho2, rho3));
    return rcpp_result_gen;
END_RCPP
}
// ModePoly
NumericVector ModePoly(NumericVector roots, double nIter, double tol);
RcppExport SEXP subdiff_ModePoly(SEXP rootsSEXP, SEXP nIterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type roots(rootsSEXP);
    Rcpp::traits::input_parameter< double >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ModePoly(roots, nIter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"subdiff_log1pexp_wrapper", (DL_FUNC) &subdiff_log1pexp_wrapper, 1},
    {"subdiff_ma1Resid", (DL_FUNC) &subdiff_ma1Resid, 2},
    {"subdiff_ma2Resid", (DL_FUNC) &subdiff_ma2Resid, 3},
    {"subdiff_ma3Resid", (DL_FUNC) &subdiff_ma3Resid, 4},
    {"subdiff_ModePoly", (DL_FUNC) &subdiff_ModePoly, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_subdiff(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
