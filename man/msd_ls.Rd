% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/msd_ls.R
\name{msd_ls}
\alias{msd_ls}
\title{Least-squares power-law fit to sample mean square displacement curves.}
\usage{
msd_ls(msd, tseq, pooled = TRUE, logw = TRUE)
}
\arguments{
\item{msd}{Vector or matrix of sample MSDs, each column corresponding to a different trajectory.}

\item{tseq}{Vector of time points at which the MSDs are recorded (see Details).}

\item{pooled}{Logical; whether to calculate separate regressions for each MSD or pool all of them together.}

\item{logw}{Logical; whether or not regression should be log-weighted (see Details).}
}
\value{
A vector of length 2 if \code{pooled = TRUE}, or a 2-row matrix of \code{alpha} and \code{D} values if \code{pooled = FALSE}.
}
\description{
Least-squares power-law fit to sample mean square displacement curves.
}
\details{
A power-law fit to the empirical MSD is calculated by performing the linear regression
\preformatted{
log(msd) ~ log(D) + alpha * log(tseq).
}
From a curve fitting perspective, we seek to estimate the "best" power-law describing the MSD, i.e., if MSD(t) is the true MSD at time t, then the best power law minimizes
\preformatted{
integral_0^Inf | log MSD(t) - log(D) - alpha * log(t) |^2 w(t) dt,
}
where \code{w(t) > 0} is a weight function.  The default value of \code{logw = FALSE} uses \code{w(t) = 1}, but this doesn't give the best MSD fit on the log-log scale, as there are exponentially more points as we move right in the graph, such that the right side of the graph will dominate the fit.  Setting \code{logw = TRUE} uses uniform weighting on the log-scale, which corresponds to \code{w(t) = 1/t}.

For computational efficiency, the MSDs are expected to all be sampled at the same time points.  If this is not the case, missing time points should beindicated by \code{NA} in the \code{msd} matrix.
}
\examples{
# generates a 2-d series of fBM.
alpha <- 0.8
dt <- 1/60
N <- 1800
acf1 <- fbm_acf(alpha, dt, N)
dX <- rSnorm(2, acf = acf1)
Xt <- apply(dX, 2, cumsum)
# Compute the MSD of Xt
nlag <- 600
msd1 <- msd_fit(Xt, nlag = nlag)
# Least-Square fitting of MSD
tseq <- 1:nlag * dt
msd_ls(msd1, tseq)
}
